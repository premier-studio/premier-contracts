{
  "address": "0x7fc2C86d96F5046F8056b8C8DDf5aA3849892C21",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidDropId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "DropCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dripId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dripId",
          "type": "uint256"
        }
      ],
      "name": "Mutated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundsWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "versions",
          "type": "uint8"
        }
      ],
      "name": "createDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dripId",
          "type": "uint256"
        }
      ],
      "name": "dripInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "version",
                  "type": "uint8"
                },
                {
                  "internalType": "enum DripStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenContract",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DripMutation",
                  "name": "mutation",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Drip",
              "name": "drip",
              "type": "tuple"
            }
          ],
          "internalType": "struct DripInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "drop",
      "outputs": [
        {
          "internalType": "contract Drop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "dropInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_contract",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "versions",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "contractURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dropURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "internalType": "struct DropInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "versionId",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dripId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC721",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mutate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setDropURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98017ae8b93c42e2b8f0c8940a64402f4cd889a483f21a8edf42229b9d77dfd6",
  "receipt": {
    "to": null,
    "from": "0xd72dd6Aa62f47dBBe87dCFA64C7C502eaa479ba9",
    "contractAddress": "0x7fc2C86d96F5046F8056b8C8DDf5aA3849892C21",
    "transactionIndex": 15,
    "gasUsed": "3705797",
    "logsBloom": "0x
    "blockHash": "0x572ed1bc144ac3d6fc6a476e74fcb0d58fb275257268f9935d2c1d763b6695a4",
    "transactionHash": "0x98017ae8b93c42e2b8f0c8940a64402f4cd889a483f21a8edf42229b9d77dfd6",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 3398986,
        "transactionHash": "0x98017ae8b93c42e2b8f0c8940a64402f4cd889a483f21a8edf42229b9d77dfd6",
        "address": "0x7fc2C86d96F5046F8056b8C8DDf5aA3849892C21",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d72dd6aa62f47dbbe87dcfa64c7c502eaa479ba9"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x572ed1bc144ac3d6fc6a476e74fcb0d58fb275257268f9935d2c1d763b6695a4"
      }
    ],
    "blockNumber": 3398986,
    "cumulativeGasUsed": "4887505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b0ec9e2075fe582f57cceaebcde3889f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDropId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dripId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dripId\",\"type\":\"uint256\"}],\"name\":\"Mutated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"versions\",\"type\":\"uint8\"}],\"name\":\"createDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dripId\",\"type\":\"uint256\"}],\"name\":\"dripInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"enum DripStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct DripMutation\",\"name\":\"mutation\",\"type\":\"tuple\"}],\"internalType\":\"struct Drip\",\"name\":\"drip\",\"type\":\"tuple\"}],\"internalType\":\"struct DripInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[{\"internalType\":\"contract Drop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"dropInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"versions\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dropURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct DropInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"versionId\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dripId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mutate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setDropURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Maxime Aubanel - @sshmaxime\",\"kind\":\"dev\",\"methods\":{\"createDrop(uint256,uint256,uint8)\":{\"details\":\"Create a Drop.\"},\"dripInfo(uint256,uint256)\":{\"details\":\"Returns the Drip info matching the drop id and drip id.\"},\"drop(uint256)\":{\"details\":\"Returns the Drop contract matching the drop id.\"},\"dropInfo(uint256)\":{\"details\":\"Returns the Drop info matching the drop id.\"},\"dropSupply()\":{\"details\":\"Returns the drop supply.\"},\"mint(uint256,uint8)\":{\"details\":\"Mint a Drip.\"},\"mutate(uint256,uint256,address,uint256)\":{\"details\":\"Mutate a Drip.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseURI(uint256,string)\":{\"details\":\"Set the baseURI of a Drop.\"},\"setContractURI(uint256,string)\":{\"details\":\"Set the contractURI of a Drop.\"},\"setDropURI(uint256,string)\":{\"details\":\"Set the dropURI of a DROP.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"Withdraw funds from Drop.\"}},\"title\":\"Store\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/Store.sol\":\"Store\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/system/Drop.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev A struct representing the status of a Drip.\\n */\\nenum DripStatus {\\n    DEFAULT,\\n    MUTATED\\n}\\n\\n/**\\n * @dev A struct representing the mutation of a Drip.\\n */\\nstruct DripMutation {\\n    address tokenContract;\\n    uint256 tokenId;\\n}\\n\\n/**\\n * @dev A struct representing a Drip.\\n */\\nstruct Drip {\\n    // Drip Metadata\\n    uint8 version;\\n    // Drip Status\\n    DripStatus status;\\n    // Drip Mutation\\n    DripMutation mutation;\\n}\\n\\n/**\\n * @dev A struct representing the general information of a Drop.\\n */\\nstruct DropInfo {\\n    // Drop Identification\\n    address _contract;\\n    string symbol;\\n    string name;\\n    uint256 id;\\n    // Drop Info\\n    uint256 currentSupply;\\n    uint256 maxSupply;\\n    uint256 price;\\n    uint8 versions;\\n    // Drop URIs\\n    string contractURI;\\n    string dropURI;\\n    string baseURI;\\n}\\n\\n/**\\n * @dev A struct representing the general information of a Drip.\\n */\\nstruct DripInfo {\\n    // Drip Identification\\n    uint256 id;\\n    // Drip Info\\n    address owner;\\n    // Drip Metadata\\n    Drip drip;\\n}\\n\\n/**\\n * @author Maxime Aubanel - @sshmaxime\\n *\\n * @title Drop\\n */\\ncontract Drop is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    string public constant NAME_PREFIX = \\\"DROP#\\\";\\n    string public constant SYMBOL_PREFIX = \\\"DROP#\\\";\\n\\n    // Contract's URI\\n    string private CONTRACT_URI = \\\"\\\";\\n\\n    // Drop's URI\\n    string private DROP_URI = \\\"\\\";\\n\\n    // Drips's base URI\\n    string private BASE_URI = \\\"\\\";\\n\\n    // Immutables\\n\\n    // The id of the Drop\\n    uint256 private immutable DROP_ID;\\n\\n    // The maximum supply of the Drop\\n    uint256 private immutable MAX_SUPPLY;\\n\\n    // The price to mint the Drip\\n    uint256 private immutable PRICE;\\n\\n    // The number of versions\\n    uint8 private immutable VERSIONS; // starts at version 1, cannot be 0\\n\\n    // Mappings\\n\\n    // Mapping from drip id to Drip\\n    mapping(uint256 => Drip) private dripIdToDrip;\\n\\n    // Errors\\n\\n    error AlreadyMutated();\\n\\n    error InvalidMaxSupply();\\n    error InvalidVersions();\\n    error InvalidVersionId();\\n    error InvalidDripId();\\n    error InvalidPrice();\\n    error InvalidDripOwner();\\n    error InvalidTokenOwner();\\n\\n    error MaxSupplyReached();\\n\\n    error UnsupportedTokenContract();\\n\\n    constructor(\\n        uint256 id,\\n        uint256 _maxSupply,\\n        uint256 _price,\\n        uint8 _versions\\n    ) ERC721(string.concat(NAME_PREFIX, Strings.toString(id)), string.concat(SYMBOL_PREFIX, Strings.toString(id))) {\\n        // Drop should have at least one Drip\\n        if (_maxSupply == 0) {\\n            revert InvalidMaxSupply();\\n        }\\n\\n        // Drop should have at least one version\\n        if (_versions == 0) {\\n            revert InvalidVersions();\\n        }\\n\\n        DROP_ID = id;\\n        MAX_SUPPLY = _maxSupply;\\n        PRICE = _price;\\n        VERSIONS = _versions;\\n    }\\n\\n    /**\\n     * @dev Returns the general information of the Drop.\\n     */\\n    function dropInfo() public view returns (DropInfo memory) {\\n        return\\n            DropInfo({\\n                _contract: address(this),\\n                symbol: symbol(),\\n                name: name(),\\n                id: dropId(),\\n                maxSupply: maxSupply(),\\n                versions: versions(),\\n                price: price(),\\n                currentSupply: totalSupply(),\\n                contractURI: contractURI(),\\n                dropURI: dropURI(),\\n                baseURI: baseURI()\\n            });\\n    }\\n\\n    /**\\n     * @dev Returns the Drip matching the Drip id.\\n     */\\n    function dripInfo(uint256 dripId) public view returns (DripInfo memory) {\\n        Drip memory _drip = dripIdToDrip[dripId];\\n\\n        if (dripId >= totalSupply()) {\\n            revert InvalidDripId();\\n        }\\n\\n        return DripInfo({ id: dripId, owner: this.ownerOf(dripId), drip: _drip });\\n    }\\n\\n    /**\\n     * @dev Returns the id of the Drop.\\n     */\\n    function dropId() public view returns (uint256) {\\n        return DROP_ID;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum supply of the Drop.\\n     */\\n    function maxSupply() public view returns (uint256) {\\n        return MAX_SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Returns the price to mint a Drip from this Drop.\\n     */\\n    function price() public view returns (uint256) {\\n        return PRICE;\\n    }\\n\\n    /**\\n     * @dev Returns the versions of the mint.\\n     */\\n    function versions() public view returns (uint8) {\\n        return VERSIONS;\\n    }\\n\\n    /**\\n     * @dev Returns the contract URI.\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return CONTRACT_URI;\\n    }\\n\\n    /**\\n     * @dev Set the contract URI.\\n     */\\n    function setContractURI(string memory newURI) public onlyOwner {\\n        CONTRACT_URI = newURI;\\n    }\\n\\n    /**\\n     * @dev Returns the URI of the metadata of the Drop.\\n     */\\n    function dropURI() public view returns (string memory) {\\n        return DROP_URI;\\n    }\\n\\n    /**\\n     * @dev Set the URI of the metadata of the Drop.\\n     */\\n    function setDropURI(string memory newURI) public onlyOwner {\\n        DROP_URI = newURI;\\n    }\\n\\n    /**\\n     * @dev Returns the baseURI.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return BASE_URI;\\n    }\\n\\n    /**\\n     * @dev Returns the baseURI.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI();\\n    }\\n\\n    /**\\n     * @dev Set the baseURI.\\n     */\\n    function setBaseURI(string memory newURI) public onlyOwner {\\n        BASE_URI = newURI;\\n    }\\n\\n    /**\\n     * @dev Mint a Drip.\\n     */\\n    function mint(uint8 versionId, address caller) external payable nonReentrant onlyOwner returns (uint256 dripId) {\\n        dripId = totalSupply();\\n\\n        // Drip id to be minted needs to be below the max supply limit\\n        if (dripId >= MAX_SUPPLY) {\\n            revert MaxSupplyReached();\\n        }\\n\\n        // Caller needs to mint a valid Drip version\\n        if (versionId >= VERSIONS) {\\n            revert InvalidVersionId();\\n        }\\n\\n        // Caller needs to provide a valid price\\n        if (msg.value != PRICE) {\\n            revert InvalidPrice();\\n        }\\n\\n        _safeMint(caller, dripId);\\n        dripIdToDrip[dripId] = Drip({\\n            version: versionId,\\n            status: DripStatus.DEFAULT,\\n            mutation: DripMutation({ tokenContract: address(0), tokenId: 0 })\\n        });\\n    }\\n\\n    /**\\n     * @dev Mutate a Drip.\\n     */\\n    function mutate(\\n        uint256 dripId,\\n        IERC721 tokenContract,\\n        uint256 tokenId,\\n        address caller\\n    ) external nonReentrant onlyOwner {\\n        Drip storage _drip = dripIdToDrip[dripId];\\n\\n        // Caller should own the Drip\\n        if (_ownerOf(dripId) != caller) {\\n            revert InvalidDripOwner();\\n        }\\n\\n        // Drip status should be Default\\n        if (_drip.status != DripStatus.DEFAULT) {\\n            revert AlreadyMutated();\\n        }\\n\\n        // Owner of tokenId should be the caller\\n        if (tokenContract.ownerOf(tokenId) != caller) {\\n            revert InvalidTokenOwner();\\n        }\\n\\n        _drip.status = DripStatus.MUTATED;\\n        _drip.mutation.tokenContract = address(tokenContract);\\n        _drip.mutation.tokenId = tokenId;\\n    }\\n\\n    /**\\n     * @dev Withdraw funds.\\n     */\\n    function withdraw(address to) public onlyOwner returns (uint256 balance) {\\n        balance = address(this).balance;\\n        payable(to).transfer(balance);\\n    }\\n}\\n\",\"keccak256\":\"0x86a0ff1fefd76ce1c1eb9279ff2a4ac6ad5974f56de65b4adc7915ec62c2e678\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/system/Store.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { Drop, Drip, DripInfo, DropInfo, DripStatus } from \\\"./Drop.sol\\\";\\n\\n/**\\n * @author Maxime Aubanel - @sshmaxime\\n *\\n * @title Store\\n */\\ncontract Store is ReentrancyGuard, Ownable {\\n    // Total supply of Drops\\n    uint256 private DROP_SUPPLY = 0;\\n\\n    // Mappings\\n\\n    // Mapping from drop id to drop contract\\n    mapping(uint256 => Drop) private dropIdToDrop;\\n\\n    // Events\\n\\n    // Event emitted when a Drop is created\\n    event DropCreated(uint256 indexed dropId);\\n\\n    // Event triggered when a Drip is minted\\n    event Minted(uint256 indexed dropId, uint256 indexed dripId);\\n\\n    // Event triggered when a Drip is mutated\\n    event Mutated(uint256 indexed dropId, uint256 indexed dripId);\\n\\n    // Event triggered when funds are withdrawn\\n    event Withdrawn(uint256 indexed dropId, uint256 fundsWithdrawn);\\n\\n    // Errors\\n\\n    error InvalidDropId();\\n\\n    /**\\n     * @dev Returns the drop supply.\\n     */\\n    function dropSupply() public view returns (uint256) {\\n        return DROP_SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Returns the Drop contract matching the drop id.\\n     */\\n    function drop(uint256 dropId) public view returns (Drop) {\\n        if (dropId >= dropSupply()) {\\n            revert InvalidDropId();\\n        }\\n\\n        return dropIdToDrop[dropId];\\n    }\\n\\n    /**\\n     * @dev Returns the Drop info matching the drop id.\\n     */\\n    function dropInfo(uint256 dropId) public view returns (DropInfo memory) {\\n        return drop(dropId).dropInfo();\\n    }\\n\\n    /**\\n     * @dev Returns the Drip info matching the drop id and drip id.\\n     */\\n    function dripInfo(uint256 dropId, uint256 dripId) public view returns (DripInfo memory) {\\n        return drop(dropId).dripInfo(dripId);\\n    }\\n\\n    /**\\n     * @dev Set the contractURI of a Drop.\\n     */\\n    function setContractURI(uint256 dropId, string memory newURI) public onlyOwner {\\n        drop(dropId).setContractURI(newURI);\\n    }\\n\\n    /**\\n     * @dev Set the dropURI of a DROP.\\n     */\\n    function setDropURI(uint256 dropId, string memory newURI) public onlyOwner {\\n        drop(dropId).setDropURI(newURI);\\n    }\\n\\n    /**\\n     * @dev Set the baseURI of a Drop.\\n     */\\n    function setBaseURI(uint256 dropId, string memory newURI) public onlyOwner {\\n        drop(dropId).setBaseURI(newURI);\\n    }\\n\\n    /**\\n     * @dev Create a Drop.\\n     */\\n    function createDrop(uint256 maxSupply, uint256 mintPrice, uint8 versions) public onlyOwner {\\n        uint256 dropIdToCreate = dropSupply();\\n        dropIdToDrop[dropIdToCreate] = new Drop(dropIdToCreate, maxSupply, mintPrice, versions);\\n\\n        DROP_SUPPLY++;\\n\\n        emit DropCreated(dropIdToCreate);\\n    }\\n\\n    /**\\n     * @dev Mint a Drip.\\n     */\\n    function mint(uint256 dropId, uint8 versionId) external payable nonReentrant {\\n        uint256 dripId = drop(dropId).mint{ value: msg.value }(versionId, msg.sender);\\n\\n        emit Minted(dropId, dripId);\\n    }\\n\\n    /**\\n     * @dev Mutate a Drip.\\n     */\\n    function mutate(uint256 dropId, uint256 dripId, IERC721 tokenContract, uint256 tokenId) external nonReentrant {\\n        drop(dropId).mutate(dripId, tokenContract, tokenId, msg.sender);\\n\\n        emit Mutated(dropId, dripId);\\n    }\\n\\n    /**\\n     * @dev Withdraw funds from Drop.\\n     */\\n    function withdraw(uint256 dropId) public onlyOwner {\\n        uint256 balance = drop(dropId).withdraw(msg.sender);\\n\\n        emit Withdrawn(dropId, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x95126fe81caafbc49078d4c69896004ec4e458d16dd2eb774888ebcbc4575c39\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025534801561001557600080fd5b50600160005561002433610029565b61007b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6141518061008a6000396000f3fe608060405260043610620000ef5760003560e01c80635fdc9e0a11620000895780639ab717de11620000605780639ab717de146200027d578063a8126a5d14620002b1578063f2fde38b14620002d6578063fb2f1ffb14620002fb57600080fd5b80635fdc9e0a1462000225578063715018a614620002455780638da5cb5b146200025d57600080fd5b80632bb82d3d11620000ca5780632bb82d3d14620001825780632e1a7d4d14620001b65780633099c54914620001db57806333cfcb9f146200020057600080fd5b80630d88b46014620000f4578063211d9a53146200011b57806327a8e408146200015d575b600080fd5b3480156200010157600080fd5b50620001196200011336600462000b26565b62000312565b005b3480156200012857600080fd5b50620001406200013a36600462000b62565b620003e8565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200016a57600080fd5b50620001196200017c36600462000b92565b62000430565b3480156200018f57600080fd5b50620001a7620001a136600462000b62565b620004f6565b60405162000154919062000c28565b348015620001c357600080fd5b5062000119620001d536600462000b62565b620005d9565b348015620001e857600080fd5b5062000119620001fa36600462000e1c565b620006a0565b3480156200020d57600080fd5b50620001196200021f36600462000e1c565b6200071a565b3480156200023257600080fd5b5060025460405190815260200162000154565b3480156200025257600080fd5b50620001196200075c565b3480156200026a57600080fd5b506001546001600160a01b031662000140565b3480156200028a57600080fd5b50620002a26200029c36600462000eae565b62000774565b60405162000154919062000ed1565b348015620002be57600080fd5b5062000119620002d036600462000e1c565b62000802565b348015620002e357600080fd5b5062000119620002f536600462000f4e565b62000844565b620001196200030c36600462000f6e565b620008c7565b6200031c62000998565b60006200032860025490565b9050808484846040516200033c9062000aa1565b9384526020840192909252604083015260ff166060820152608001604051809103906000f08015801562000374573d6000803e3d6000fd5b50600082815260036020526040812080546001600160a01b0319166001600160a01b0393909316929092179091556002805491620003b28362000fa1565b909155505060405181907f01a6d33d95d2560a8c53f00317beb1d0364b3ecf2d43f647d2b4671df27f4f4590600090a250505050565b6000620003f460025490565b82106200041457604051632fca366560e01b815260040160405180910390fd5b506000908152600360205260409020546001600160a01b031690565b6200043a620009f4565b6200044584620003e8565b604051637f485a8d60e01b8152600481018590526001600160a01b038481166024830152604482018490523360648301529190911690637f485a8d90608401600060405180830381600087803b1580156200049f57600080fd5b505af1158015620004b4573d6000803e3d6000fd5b50506040518592508691507f68fb5eb2bb5ac5608baca07a0b3dbb454e113561ede5f9408b7c095298b68cdd90600090a3620004f06001600055565b50505050565b6200056060405180610160016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600060ff1681526020016060815260200160608152602001606081525090565b6200056b82620003e8565b6001600160a01b03166390a303ee6040518163ffffffff1660e01b8152600401600060405180830381865afa158015620005a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620005d391908101906200103c565b92915050565b620005e362000998565b6000620005f082620003e8565b6040516351cff8d960e01b81523360048201526001600160a01b0391909116906351cff8d9906024016020604051808303816000875af115801562000639573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200065f9190620011a4565b9050817f0c875c8d391179c5cf7ad8303d268efd50b8beb78b671f85cd54bfb91eb8ef40826040516200069491815260200190565b60405180910390a25050565b620006aa62000998565b620006b582620003e8565b6001600160a01b03166379575294826040518263ffffffff1660e01b8152600401620006e29190620011be565b600060405180830381600087803b158015620006fd57600080fd5b505af115801562000712573d6000803e3d6000fd5b505050505050565b6200072462000998565b6200072f82620003e8565b6001600160a01b03166355f804b3826040518263ffffffff1660e01b8152600401620006e29190620011be565b6200076662000998565b62000772600062000a4f565b565b6200077e62000aaf565b6200078983620003e8565b6001600160a01b0316638b601b8a836040518263ffffffff1660e01b8152600401620007b791815260200190565b60c060405180830381865afa158015620007d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007fb9190620011d3565b9392505050565b6200080c62000998565b6200081782620003e8565b6001600160a01b031663938e3d7b826040518263ffffffff1660e01b8152600401620006e29190620011be565b6200084e62000998565b6001600160a01b038116620008b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620008c48162000a4f565b50565b620008d1620009f4565b6000620008de83620003e8565b604051631efdd7db60e21b815260ff841660048201523360248201526001600160a01b039190911690637bf75f6c90349060440160206040518083038185885af115801562000931573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620009589190620011a4565b905080837f8a9dcf4e150b1153011b29fec302d5be0c13e84fa8f56ab78587f778a32a90dd60405160405180910390a350620009946001600055565b5050565b6001546001600160a01b03163314620007725760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620008b0565b60026000540362000a485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620008b0565b6002600055565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612ea080620012a583390190565b604080516060810182526000808252602082015290810162000ad062000ad5565b905290565b604080516060810190915260008082526020820190815260200162000ad0604051806040016040528060006001600160a01b03168152602001600081525090565b60ff81168114620008c457600080fd5b60008060006060848603121562000b3c57600080fd5b8335925060208401359150604084013562000b578162000b16565b809150509250925092565b60006020828403121562000b7557600080fd5b5035919050565b6001600160a01b0381168114620008c457600080fd5b6000806000806080858703121562000ba957600080fd5b8435935060208501359250604085013562000bc48162000b7c565b9396929550929360600135925050565b60005b8381101562000bf157818101518382015260200162000bd7565b50506000910152565b6000815180845262000c1481602086016020860162000bd4565b601f01601f19169290920160200192915050565b6020815262000c436020820183516001600160a01b03169052565b6000602083015161016080604085015262000c6361018085018362000bfa565b91506040850151601f198086850301606087015262000c83848362000bfa565b935060608701516080870152608087015160a087015260a087015160c087015260c087015160e087015260e0870151915061010062000cc68188018460ff169052565b8088015192505061012081878603018188015262000ce5858462000bfa565b94508088015192505061014081878603018188015262000d06858462000bfa565b90880151878203909201848801529350905062000d24838262000bfa565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171562000d6b5762000d6b62000d2e565b60405290565b6040516060810167ffffffffffffffff8111828210171562000d6b5762000d6b62000d2e565b6040805190810167ffffffffffffffff8111828210171562000d6b5762000d6b62000d2e565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000de95762000de962000d2e565b604052919050565b600067ffffffffffffffff82111562000e0e5762000e0e62000d2e565b50601f01601f191660200190565b6000806040838503121562000e3057600080fd5b82359150602083013567ffffffffffffffff81111562000e4f57600080fd5b8301601f8101851362000e6157600080fd5b803562000e7862000e728262000df1565b62000dbd565b81815286602083850101111562000e8e57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121562000ec257600080fd5b50508035926020909101359150565b815181526020808301516001600160a01b0390811682840152604080850151805160ff16918501919091529182015160c084019291906002811062000f2657634e487b7160e01b600052602160045260246000fd5b606085015260409190910151805190911660808401526020015160a090920191909152919050565b60006020828403121562000f6157600080fd5b8135620007fb8162000b7c565b6000806040838503121562000f8257600080fd5b82359150602083013562000f968162000b16565b809150509250929050565b60006001820162000fc257634e487b7160e01b600052601160045260246000fd5b5060010190565b805162000fd68162000b7c565b919050565b600082601f83011262000fed57600080fd5b815162000ffe62000e728262000df1565b8181528460208386010111156200101457600080fd5b6200102782602083016020870162000bd4565b949350505050565b805162000fd68162000b16565b6000602082840312156200104f57600080fd5b815167ffffffffffffffff808211156200106857600080fd5b9083019061016082860312156200107e57600080fd5b6200108862000d44565b620010938362000fc9565b8152602083015182811115620010a857600080fd5b620010b68782860162000fdb565b602083015250604083015182811115620010cf57600080fd5b620010dd8782860162000fdb565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526200111960e084016200102f565b60e082015261010080840151838111156200113357600080fd5b620011418882870162000fdb565b82840152505061012080840151838111156200115c57600080fd5b6200116a8882870162000fdb565b82840152505061014080840151838111156200118557600080fd5b620011938882870162000fdb565b918301919091525095945050505050565b600060208284031215620011b757600080fd5b5051919050565b602081526000620007fb602083018462000bfa565b600081830360c0811215620011e757600080fd5b620011f162000d71565b835181526020840151620012058162000b7c565b60208201526080603f19830112156200121d57600080fd5b6200122762000d71565b6040850151620012378162000b16565b81526060850151600281106200124c57600080fd5b60208201526040607f19840112156200126457600080fd5b6200126e62000d97565b92506080850151620012808162000b7c565b835260a094909401516020830152604084810192909252908101929092525091905056fe6101206040526000610100908152600c906200001c908262000463565b50604080516020810190915260008152600d906200003b908262000463565b50604080516020810190915260008152600e906200005a908262000463565b503480156200006857600080fd5b5060405162002ea038038062002ea08339810160408190526200008b916200052f565b6040518060400160405280600581526020016444524f502360d81b815250620000bf85620001da60201b620012fa1760201c565b604051602001620000d2929190620005aa565b6040516020818303038152906040526040518060400160405280600581526020016444524f502360d81b8152506200011586620001da60201b620012fa1760201c565b60405160200162000128929190620005aa565b60408051601f19818403018152919052600062000146838262000463565b50600162000155828262000463565b505050620001726200016c6200027e60201b60201c565b62000282565b6001600b5560008390036200019a5760405163066f305360e21b815260040160405180910390fd5b8060ff16600003620001bf57604051631e54b82b60e11b815260040160405180910390fd5b60809390935260a09190915260c05260ff1660e052620005cb565b60606000620001f483620002d460201b6200138d1760201c565b60010190506000816001600160401b03811115620002165762000216620003be565b6040519080825280601f01601f19166020018201604052801562000241576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200024b57509392505050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106200031e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106200034b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200036a57662386f26fc10000830492506010015b6305f5e100831062000383576305f5e100830492506008015b61271083106200039857612710830492506004015b60648310620003ab576064830492506002015b600a8310620003b8576001015b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620003e957607f821691505b6020821081036200040a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200045e57600081815260208120601f850160051c81016020861015620004395750805b601f850160051c820191505b818110156200045a5782815560010162000445565b5050505b505050565b81516001600160401b038111156200047f576200047f620003be565b6200049781620004908454620003d4565b8462000410565b602080601f831160018114620004cf5760008415620004b65750858301515b600019600386901b1c1916600185901b1785556200045a565b600085815260208120601f198616915b828110156200050057888601518255948401946001909101908401620004df565b50858210156200051f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080600080608085870312156200054657600080fd5b845193506020850151925060408501519150606085015160ff811681146200056d57600080fd5b939692955090935050565b6000815160005b818110156200059b57602081850181015186830152016200057f565b50600093019283525090919050565b6000620005c3620005bc838662000578565b8462000578565b949350505050565b60805160a05160c05160e05161286a62000636600039600081816106d401528181610c56015261115b01526000818161058b01528181610c9c015261113501526000818161061e01528181610c16015261110f01526000818161032801526110db015261286a6000f3fe60806040526004361061020f5760003560e01c80637957529411610118578063a035b1fe116100a0578063d5abeb011161006f578063d5abeb011461060f578063e8a3d48514610642578063e985e9c514610657578063f2fde38b146106a0578063f8b1cb3c146106c057600080fd5b8063a035b1fe1461057c578063a22cb465146105af578063b88d4fde146105cf578063c87b56dd146105ef57600080fd5b80638b601b8a116100e75780638b601b8a146104da5780638da5cb5b1461050757806390a303ee14610525578063938e3d7b1461054757806395d89b411461056757600080fd5b806379575294146104875780637bf75f6c146104a75780637f485a8d146104ba5780637f7c4746146103ec57600080fd5b806342842e0e1161019b578063631c2bb81161016a578063631c2bb8146103ec5780636352211e1461041d5780636c0360eb1461043d57806370a0823114610452578063715018a61461047257600080fd5b806342842e0e1461036c5780634f6ccce71461038c57806351cff8d9146103ac57806355f804b3146103cc57600080fd5b806317f38959116101e257806317f38959146102c557806318160ddd146102da57806323b872dd146102f95780632a778c9b146103195780632f745c591461034c57600080fd5b806301ffc9a71461021457806306fdde0314610249578063081812fc1461026b578063095ea7b3146102a3575b600080fd5b34801561022057600080fd5b5061023461022f366004612040565b6106fe565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061025e610729565b60405161024091906120ad565b34801561027757600080fd5b5061028b6102863660046120c0565b6107bb565b6040516001600160a01b039091168152602001610240565b3480156102af57600080fd5b506102c36102be3660046120ee565b6107e2565b005b3480156102d157600080fd5b5061025e6108fc565b3480156102e657600080fd5b506008545b604051908152602001610240565b34801561030557600080fd5b506102c361031436600461211a565b61090b565b34801561032557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102eb565b34801561035857600080fd5b506102eb6103673660046120ee565b61093c565b34801561037857600080fd5b506102c361038736600461211a565b6109d2565b34801561039857600080fd5b506102eb6103a73660046120c0565b6109ed565b3480156103b857600080fd5b506102eb6103c736600461215b565b610a80565b3480156103d857600080fd5b506102c36103e7366004612204565b610ac9565b3480156103f857600080fd5b5061025e6040518060400160405280600581526020016444524f502360d81b81525081565b34801561042957600080fd5b5061028b6104383660046120c0565b610ae1565b34801561044957600080fd5b5061025e610b41565b34801561045e57600080fd5b506102eb61046d36600461215b565b610b50565b34801561047e57600080fd5b506102c3610bd6565b34801561049357600080fd5b506102c36104a2366004612204565b610bea565b6102eb6104b536600461224d565b610bfe565b3480156104c657600080fd5b506102c36104d536600461228c565b610d9b565b3480156104e657600080fd5b506104fa6104f53660046120c0565b610eff565b60405161024091906122ec565b34801561051357600080fd5b50600a546001600160a01b031661028b565b34801561053157600080fd5b5061053a61103b565b6040516102409190612368565b34801561055357600080fd5b506102c3610562366004612204565b6111ab565b34801561057357600080fd5b5061025e6111bf565b34801561058857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102eb565b3480156105bb57600080fd5b506102c36105ca366004612462565b6111ce565b3480156105db57600080fd5b506102c36105ea366004612495565b6111d9565b3480156105fb57600080fd5b5061025e61060a3660046120c0565b61120b565b34801561061b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102eb565b34801561064e57600080fd5b5061025e611272565b34801561066357600080fd5b50610234610672366004612515565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106ac57600080fd5b506102c36106bb36600461215b565b611281565b3480156106cc57600080fd5b5060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610240565b60006001600160e01b0319821663780e9d6360e01b1480610723575061072382611465565b92915050565b60606000805461073890612533565b80601f016020809104026020016040519081016040528092919081815260200182805461076490612533565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b5050505050905090565b60006107c6826114b5565b506000908152600460205260409020546001600160a01b031690565b60006107ed82610ae1565b9050806001600160a01b0316836001600160a01b03160361085f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061087b575061087b8133610672565b6108ed5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610856565b6108f78383611514565b505050565b6060600d805461073890612533565b6109153382611582565b6109315760405162461bcd60e51b815260040161085690612567565b6108f7838383611601565b600061094783610b50565b82106109a95760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610856565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6108f7838383604051806020016040528060008152506111d9565b60006109f860085490565b8210610a5b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610856565b60088281548110610a6e57610a6e6125b4565b90600052602060002001549050919050565b6000610a8a611772565b5060405147906001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610ac3573d6000803e3d6000fd5b50919050565b610ad1611772565b600e610add8282612618565b5050565b6000818152600260205260408120546001600160a01b0316806107235760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610856565b6060600e805461073890612533565b60006001600160a01b038216610bba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610856565b506001600160a01b031660009081526003602052604090205490565b610bde611772565b610be860006117cc565b565b610bf2611772565b600d610add8282612618565b6000610c0861181e565b610c10611772565b506008547f00000000000000000000000000000000000000000000000000000000000000008110610c545760405163d05cb60960e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff168360ff1610610c9a5760405163062e62f160e41b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003414610cd95760405162bfc92160e01b815260040160405180910390fd5b610ce38282611877565b604080516060810190915260ff8416815260208101600081526040805180820182526000808252602082810182905293840191909152848152600f8352208251815460ff90911660ff19821681178355928401519192839161ffff191617610100836001811115610d5657610d566122d6565b02179055506040919091015180516001830180546001600160a01b039092166001600160a01b0319909216919091179055602001516002909101556107236001600b55565b610da361181e565b610dab611772565b6000848152600f602090815260408083206002909252909120546001600160a01b03838116911614610df057604051630924ccb560e31b815260040160405180910390fd5b60008154610100900460ff166001811115610e0d57610e0d6122d6565b14610e2b57604051639da7cee760e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018490526001600160a01b038084169190861690636352211e90602401602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9991906126d8565b6001600160a01b031614610ec05760405163153e35b760e11b815260040160405180910390fd5b805461010061ff0019909116178155600180820180546001600160a01b0319166001600160a01b0387161790556002909101839055600b555b50505050565b610f07611fc6565b6000828152600f60209081526040808320815160608101909252805460ff80821684529293919291840191610100909104166001811115610f4a57610f4a6122d6565b6001811115610f5b57610f5b6122d6565b81526040805180820190915260018301546001600160a01b0316815260029092015460208381019190915201529050610f9360085490565b8310610fb2576040516380f9b50d60e01b815260040160405180910390fd5b6040805160608101825284815290516331a9108f60e11b81526004810185905260208201903090636352211e90602401602060405180830381865afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102391906126d8565b6001600160a01b031681526020019190915292915050565b6110a460405180610160016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600060ff1681526020016060815260200160608152602001606081525090565b604051806101600160405280306001600160a01b031681526020016110c76111bf565b81526020016110d4610729565b81526020017f0000000000000000000000000000000000000000000000000000000000000000815260200161110860085490565b81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060ff16815260200161118a611272565b81526020016111976108fc565b81526020016111a4610b41565b9052919050565b6111b3611772565b600c610add8282612618565b60606001805461073890612533565b610add338383611891565b6111e33383611582565b6111ff5760405162461bcd60e51b815260040161085690612567565b610ef98484848461195f565b6060611216826114b5565b6000611220611992565b90506000815111611240576040518060200160405280600081525061126b565b8061124a846112fa565b60405160200161125b9291906126f5565b6040516020818303038152906040525b9392505050565b6060600c805461073890612533565b611289611772565b6001600160a01b0381166112ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610856565b6112f7816117cc565b50565b606060006113078361138d565b600101905060008167ffffffffffffffff81111561132757611327612178565b6040519080825280601f01601f191660200182016040528015611351576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461135b57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106113cc5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106113f8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061141657662386f26fc10000830492506010015b6305f5e100831061142e576305f5e100830492506008015b612710831061144257612710830492506004015b60648310611454576064830492506002015b600a83106107235760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061149657506001600160e01b03198216635b5e139f60e01b145b8061072357506301ffc9a760e01b6001600160e01b0319831614610723565b6000818152600260205260409020546001600160a01b03166112f75760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610856565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061154982610ae1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061158e83610ae1565b9050806001600160a01b0316846001600160a01b031614806115d557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115f95750836001600160a01b03166115ee846107bb565b6001600160a01b0316145b949350505050565b826001600160a01b031661161482610ae1565b6001600160a01b03161461163a5760405162461bcd60e51b815260040161085690612724565b6001600160a01b03821661169c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610856565b6116a983838360016119a1565b826001600160a01b03166116bc82610ae1565b6001600160a01b0316146116e25760405162461bcd60e51b815260040161085690612724565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b03163314610be85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610856565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600b54036118705760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610856565b6002600b55565b610add828260405180602001604052806000815250611ae1565b816001600160a01b0316836001600160a01b0316036118f25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610856565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196a848484611601565b61197684848484611b14565b610ef95760405162461bcd60e51b815260040161085690612769565b606061199c610b41565b905090565b6119ad84848484611c15565b6001811115611a1c5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610856565b816001600160a01b038516611a7857611a7381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611a9b565b836001600160a01b0316856001600160a01b031614611a9b57611a9b8582611c9d565b6001600160a01b038416611ab757611ab281611d3a565b611ada565b846001600160a01b0316846001600160a01b031614611ada57611ada8482611de9565b5050505050565b611aeb8383611e2d565b611af86000848484611b14565b6108f75760405162461bcd60e51b815260040161085690612769565b60006001600160a01b0384163b15611c0a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b589033908990889088906004016127bb565b6020604051808303816000875af1925050508015611b93575060408051601f3d908101601f19168201909252611b90918101906127ee565b60015b611bf0573d808015611bc1576040519150601f19603f3d011682016040523d82523d6000602084013e611bc6565b606091505b508051600003611be85760405162461bcd60e51b815260040161085690612769565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115f9565b506001949350505050565b6001811115610ef9576001600160a01b03841615611c5b576001600160a01b03841660009081526003602052604081208054839290611c55908490612821565b90915550505b6001600160a01b03831615610ef9576001600160a01b03831660009081526003602052604081208054839290611c92908490612834565b909155505050505050565b60006001611caa84610b50565b611cb49190612821565b600083815260076020526040902054909150808214611d07576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611d4c90600190612821565b60008381526009602052604081205460088054939450909284908110611d7457611d746125b4565b906000526020600020015490508060088381548110611d9557611d956125b4565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611dcd57611dcd612847565b6001900381819060005260206000200160009055905550505050565b6000611df483610b50565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611e835760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610856565b6000818152600260205260409020546001600160a01b031615611ee85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610856565b611ef66000838360016119a1565b6000818152600260205260409020546001600160a01b031615611f5b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610856565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6040805160608101825260008082526020820152908101611fe5611fea565b905290565b6040805160608101909152600080825260208201908152602001611fe5604051806040016040528060006001600160a01b03168152602001600081525090565b6001600160e01b0319811681146112f757600080fd5b60006020828403121561205257600080fd5b813561126b8161202a565b60005b83811015612078578181015183820152602001612060565b50506000910152565b6000815180845261209981602086016020860161205d565b601f01601f19169290920160200192915050565b60208152600061126b6020830184612081565b6000602082840312156120d257600080fd5b5035919050565b6001600160a01b03811681146112f757600080fd5b6000806040838503121561210157600080fd5b823561210c816120d9565b946020939093013593505050565b60008060006060848603121561212f57600080fd5b833561213a816120d9565b9250602084013561214a816120d9565b929592945050506040919091013590565b60006020828403121561216d57600080fd5b813561126b816120d9565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156121a9576121a9612178565b604051601f8501601f19908116603f011681019082821181831017156121d1576121d1612178565b816040528093508581528686860111156121ea57600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561221657600080fd5b813567ffffffffffffffff81111561222d57600080fd5b8201601f8101841361223e57600080fd5b6115f98482356020840161218e565b6000806040838503121561226057600080fd5b823560ff8116811461227157600080fd5b91506020830135612281816120d9565b809150509250929050565b600080600080608085870312156122a257600080fd5b8435935060208501356122b4816120d9565b92506040850135915060608501356122cb816120d9565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b0390811682840152604080850151805160ff16918501919091529182015160c084019291906002811061234057634e487b7160e01b600052602160045260246000fd5b606085015260409190910151805190911660808401526020015160a090920191909152919050565b602081526123826020820183516001600160a01b03169052565b600060208301516101608060408501526123a0610180850183612081565b91506040850151601f19808685030160608701526123be8483612081565b935060608701516080870152608087015160a087015260a087015160c087015260c087015160e087015260e087015191506101006124008188018460ff169052565b8088015192505061012081878603018188015261241d8584612081565b94508088015192505061014081878603018188015261243c8584612081565b9088015187820390920184880152935090506124588382612081565b9695505050505050565b6000806040838503121561247557600080fd5b8235612480816120d9565b91506020830135801515811461228157600080fd5b600080600080608085870312156124ab57600080fd5b84356124b6816120d9565b935060208501356124c6816120d9565b925060408501359150606085013567ffffffffffffffff8111156124e957600080fd5b8501601f810187136124fa57600080fd5b6125098782356020840161218e565b91505092959194509250565b6000806040838503121561252857600080fd5b8235612271816120d9565b600181811c9082168061254757607f821691505b602082108103610ac357634e487b7160e01b600052602260045260246000fd5b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b601f8211156108f757600081815260208120601f850160051c810160208610156125f15750805b601f850160051c820191505b81811015612610578281556001016125fd565b505050505050565b815167ffffffffffffffff81111561263257612632612178565b612646816126408454612533565b846125ca565b602080601f83116001811461267b57600084156126635750858301515b600019600386901b1c1916600185901b178555612610565b600085815260208120601f198616915b828110156126aa5788860151825594840194600190910190840161268b565b50858210156126c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156126ea57600080fd5b815161126b816120d9565b6000835161270781846020880161205d565b83519083019061271b81836020880161205d565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061245890830184612081565b60006020828403121561280057600080fd5b815161126b8161202a565b634e487b7160e01b600052601160045260246000fd5b818103818111156107235761072361280b565b808201808211156107235761072361280b565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000812000aa164736f6c6343000812000a",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Maxime Aubanel - @sshmaxime",
    "kind": "dev",
    "methods": {
      "createDrop(uint256,uint256,uint8)": {
        "details": "Create a Drop."
      },
      "dripInfo(uint256,uint256)": {
        "details": "Returns the Drip info matching the drop id and drip id."
      },
      "drop(uint256)": {
        "details": "Returns the Drop contract matching the drop id."
      },
      "dropInfo(uint256)": {
        "details": "Returns the Drop info matching the drop id."
      },
      "dropSupply()": {
        "details": "Returns the drop supply."
      },
      "mint(uint256,uint8)": {
        "details": "Mint a Drip."
      },
      "mutate(uint256,uint256,address,uint256)": {
        "details": "Mutate a Drip."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseURI(uint256,string)": {
        "details": "Set the baseURI of a Drop."
      },
      "setContractURI(uint256,string)": {
        "details": "Set the contractURI of a Drop."
      },
      "setDropURI(uint256,string)": {
        "details": "Set the dropURI of a DROP."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "Withdraw funds from Drop."
      }
    },
    "title": "Store",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 126,
        "contract": "contracts/system/Store.sol:Store",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/system/Store.sol:Store",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4347,
        "contract": "contracts/system/Store.sol:Store",
        "label": "DROP_SUPPLY",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4352,
        "contract": "contracts/system/Store.sol:Store",
        "label": "dropIdToDrop",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_contract(Drop)4321)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Drop)4321": {
        "encoding": "inplace",
        "label": "contract Drop",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Drop)4321)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Drop)",
        "numberOfBytes": "32",
        "value": "t_contract(Drop)4321"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}